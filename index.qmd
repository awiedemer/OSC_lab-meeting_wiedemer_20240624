---
title: "Lab Meeting 20240626 - CLI and OSC"
author: "Aaron Max Wiedemer"
date: "2024-06-25"
categories: [command line, OSC, Unix]
title-block-banner: false
number-depth: 3
editor_options:
  chunk_output_type: console
knitr:
  opts_chunk:
    out.width: "85%"
    class-output: styled-output
---

--------------------------------------------------------------------------------

<br>

![](img/osc_logo.png){fig-align="center" width="70%"}

<br>

## Meeting objectives

	- Learn how OSC is organized
	- Log into OSC on demand and learn how to navigate code server
	- Learn some basic UNIX commands
	- Learn some best file organization practices within the OSC
	- Create your own user directory within our OSC project
	
I'm not sure how far we'll get, but by the end of these lab meetings my goal is to have you introduced to the idea of using software in the command line at OSC
	
::: {.callout-tip title="(Re)Sources" collapse="false"}

Much of this is based directly on 

- [PLNTPTH 6193 - Practical Computing Skills for Omics Data](https://jelmerp.github.io/pracs-sp24/) taught by Jelmer Poelstra (which I _highly_ reccomend) 
- and a little from the COMS 2022 bioinformatics webinar series on HPC which can be found [here](https://www.youtube.com/watch?v=eFqtZsM92a8&list=PLiiqmjBmdWoPynfccwKw_afgfr2UhFUh9&index=3)
:::

# Intro to High Performance Computing and The Ohio Supercomputer

![](img/owens_HPC_image.png){fig-align="center" width="60%"}

**Supercomputer** (aka a _compute cluster_ or just a _cluster_): a group of __many computers__ connected through a high speed network which can be accessed remotley


#### __Why use the OSC?__

- Need more computing power than your own can handles (RAM, CPUs, run time)
  - e.g., when using large data sets
- Need to run many analysis
- Automation of analysis

__Very often useful for Omics data__

#### __OSC Resources__

> -   **<https://ondemand.osc.edu>**: A web portal to use OSC resources through your browser (*login needed*).
> -   <https://my.osc.edu>: Account and project management (*login needed*).
> -   <https://osc.edu>: General website with information about the supercomputers, installed software, and usage.
> 

<br>

::: {.callout-tip title="Projects" collapse=false}

Access to OSC goes through __projects__

	- Projects can be tied to a lab, class, research project, etc.
	- Each project has its own budget in terms of compute hours and storage space
	- Users can be part of multiple projects

Our lab's project is __`PAS1640`__


:::

## OSC structure

![Example of a Node](img/node_example.png "Example of a node"){fig-align="center" width="60%"}

### Words to know when taking about supercomputers

::: {.callout-note title="Terms" collapse=false}

- __Supercomputer__ (aka "compute cluster" or just "cluster): a group of __many computers__ connected through a high speed network 
  - (OSC has 2; "Owens" and "Pitzer")
- **Node**: a single computer or server
- **Core** (aka processor/ CPU): a single unit that runs a set of instructions 

:::

## OSC Organization

![OSC Organization Structure](img/osc_organization.png){fig-align="center" width="80%"}


 
::: {.callout-note title="Parts of OSC" collapse=false}

- **File Systems**: Where files are stored - this is shared between OSC systems
- **Login Nodes**: a few "lower powered" computers that everyone shares after logging in 
- **Compute Nodes**: The computers used to run analysis (e.g., slurm batch scripts)

:::

### OSC Filing system

Many directories where files are stored, all with different storage, speed, and back-ups

![OSC Filing System](img/osc_file_system.png){fig-align="center" width="80%"}

::: {.callout-note title="OSC Filing Systems" collapse=false}

- **Home** (`/users/`) : These are your files only for you. Is backed up
- **Project** (`/fs/ess/`) : Shared location for project. Is backed up
- **Scratch** (`/fs/scratch/`): Stores large input/ output files, is faster than Home or Project. Is NOT backed up.

:::

<br>

# Lets get computing

::: {.callout-important title="Everyone go here" collapse=false}

<https://ondemand.osc.edu>

:::

#### Steps

> 1. log in
> 2. interactive apps -> servers -> Code Server
> 3. fill in the following parameters


![](img/code_server.png){fig-align="center" width="45%"}

> 4. in code server, select the hamburger menu
> 5. terminal -> new terminal


![](img/new_terminal.png){fig-align="center" width="90%"}

# UNIX crash (bash?) course

OSC uses UNIX (linux like) 

::: {.callout-note title="Unix shell related terms to know" collapse=false}


	- **Command line** : the interface where you type commands
	- **Terminal** : the program that can run the shell
	- **Shell** : The command line interface to your computer (the kernel)
	- **Unix shell** : a type of shell that uses unix
	- **Bash** : the Unix language that is most common
	
:::

### Unix structure

Unix organization uses a hierarchical directory - often abbreviated to **dir**

- **Root**: the start of the directory (`/`)
- **Path**: the location of directories
  - e.g., /fs/ess/PAS1640/aaron/
  
![](img/dir_path.png){fig-align="center" width="70%"}

## BASH Commands

Instead of clicking on things to run them such as in a graphical user interface (GUI), command line requires, well, __commands__ to do anything

![anatomy of a command](img/anatomy_of_a_command.png){fig-align="center" width="70%"}

UNIX comes with lots of commands (similar to functions in R or Python), but lets start out slow

### Baby's first command:  `pwd`

Lets start with an easy and useful command - `pwd` which prints the working directory

Type it into the terminal, press enter and see what happens

```bash
pwd
```
```bash-out
/fs/ess/PAS1640
```

Essentially what is happening is we give some input and the output is printed onto the screen which is the default for most UNIX commands


### Command with arguments: `cal`

Here is another easy example of a command in CLI - `cal`

```bash
cal
```
``` bash-out
      June 2024     
Su Mo Tu We Th Fr Sa
                   1
 2  3  4  5  6  7  8
 9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30
```

Type in, press enter, get a calendar printed out

But we can __modify__ what this command does with arguments


::: {.callout-note title="Arguments" collapse=false}
__Arguments__ (also sometimes called flags) come __after a command and are preceded by a dash (-)__ and most often are a single letter
:::

With the `-j` argument using `cal` we can get printed the Julian calendar instead

```bash
cal -j
```
```bash-out
         June 2024         
Sun Mon Tue Wed Thu Fri Sat
                        153
154 155 156 157 158 159 160
161 162 163 164 165 166 167
168 169 170 171 172 173 174
175 176 177 178 179 180 181
182
```

### Getting help with `-h`

Most commands have multiple arguments, some of which are required for the command to work. We can usually check what a command does and what its arguments are with the `-h` argument

Let's try it with `cal`

```bash
cal -h
```
```bash-out
Usage:
 cal [options] [[[day] month] year]

Options:
 -1, --one        show only current month (default)
 -3, --three      show previous, current and next month
 -s, --sunday     Sunday as first day of week
 -m, --monday     Monday as first day of week
 -j, --julian     output Julian dates
 -y, --year       show whole current year
 -V, --version    display version information and exit
 -h, --help       display this help text and exit
 ```
 
 From this we can see `cal` has a lot of different options. Just for funsies lets look at using the `-3` which prints three monts AND the `-j` argument simultainiously

here, we put the arguments next to each other in any order

```bash
cal -3 -j
```
```bash-out
          May 2024                    June 2024                    July 2024         
Sun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat
            122 123 124 125                          153      183 184 185 186 187 188
126 127 128 129 130 131 132  154 155 156 157 158 159 160  189 190 191 192 193 194 195
133 134 135 136 137 138 139  161 162 163 164 165 166 167  196 197 198 199 200 201 202
140 141 142 143 144 145 146  168 169 170 171 172 173 174  203 204 205 206 207 208 209
147 148 149 150 151 152      175 176 177 178 179 180 181  210 211 212 213            
                             182  
 ```
 
Arguments can also be passed after the same dash

```bash
cal -3j
```
```bash-out
          May 2024                    June 2024                    July 2024         
Sun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat
            122 123 124 125                          153      183 184 185 186 187 188
126 127 128 129 130 131 132  154 155 156 157 158 159 160  189 190 191 192 193 194 195
133 134 135 136 137 138 139  161 162 163 164 165 166 167  196 197 198 199 200 201 202
140 141 142 143 144 145 146  168 169 170 171 172 173 174  203 204 205 206 207 208 209
147 148 149 150 151 152      175 176 177 178 179 180 181  210 211 212 213            
                             182  
 ```

::: {.callout-tip title="Spell it out" collapse="false"}

Arguments can (but not always) be written out following two preceding dashes (--)

e.g., `-h` can be specified out with `--help`

depending on the command, it can require the spelled out or the shortened form, but most basic commands should have both available

:::

## Commands I really need you to know

### Commands that do stuff: `cd`

So far the commands we have used only print something to the screen

Many commands perform some type of action though, such as `cd` which **allows us to change our current working dir**

lets first see where we are again

```bash
pwd
```
```bash-out
/fs/ess/PAS1640
```

`cd` takes a dir as an argument and takes us from our current wd to whatever dir we specify

lets use `cd` to get to the auspiciously named `practice_location/`

```bash
cd practice_location/
```

::: {.callout-tip title="Autocomplete with `tab`" collapse="false"}

instead of spelling out the full input everytime, you can use `tab` to autocomplete a line

try typing `cd p` and then pressing tab to try

If there are multple dir/ files with the start, double tapping tab will give a list of files that begin with what you have typed so far so you can select which you want to go to

:::

```bash
pwd
```
```bash-out
/fs/ess/PAS1640/practice_location
```

and now we can move around!

Here we also used __relative paths__ - because `practice_location` was only one level below, we only had to type out `/practice_location` and not the __absolute__ dir `/fs/ess/PAS1640/practice_location`. It is good to get into the habbit of using relative paths instead of absolute ones in case we move anything around. 


::: {.callout-note title="More on movement" collapse="false"}

every dir has a few hidden directories that are useful to get around

- `.` : is the dir of your current dir
- `..` : is the dir directly above you

to go back a level, use `cd ..`

:::

if we want to go further into the dir, we can spell out the whole dir to get to the `level_3` dir

```bash
cd level_1/level_2/level_3/
```

lets check

```bash
pwd
```

and to get back out, we can use `..`

```bash
cd ../../../../
```

### Making directories with `mkdir`

`mkdir` takes a dir as an argument and creates it if one does not already exist

```bash
# don't run this, its just an example of how you would use it
mkdir </new_dir>
```
::: {.callout-note .callout-warning icon="flase" }
You can make multiple subdirectories by adding the `-p` argument to `mkdir`

```bash
# don't run this, its just an example of how you would use it
mkdir -p </new_dir/new_subdir/new_sub-subdir>
```
:::

for practice, lets navigate to the `users` folder and make our own folder!

::: {.callout-warning .callout-warning icon="flase" }

Get to the `\users` dir without me showing you!!

<details>

<summary><b>Solution</b> (click here)</summary>

from within `\PAS1640`
```bash
cd \users
```
</details>

:::

#### Making your own dir

Within the `\users` dir we can make our own directories!!

call it whatever you want, but I personally recommend using 

```bash
mkdir $USER
```



::: {.callout-tip title="A tiny bit on variables" collapse="false"}

While I'm skipping a detailed explanation on variables, I'll quickly mention them here

in UNIX, __variables__ are kept in objects beginning with a dollar sign (`$`)

there are a few default ones such as 

- $HOME : stores the name of the home dir
- $USER : stores the name of the user

to see what a variable contains, try the `echo` function

```bash
# this is a general example, don't run it
echo$<VARIABLE>
```

```bash
echo$USER
```

:::

### `touch` - update or create

`touch` has a little bit of an odd name for what it is most often used for. 

the primary intended use of `touch` is to "update the access and modification times of each FILE to the current time", but in my experince is used more for its secondary function of creating an empty file if one does not already exist.

use

```bash
# this is a general example, don't run it
touch <file>.<extension>
```

e.g.,

```bash
touch README.md
```

Use this command to create a README file in your projects as a descriptor of whats there, part of good documentation!!

### `ls` - list, what's in a dir

`ls` can be run on its own to show what is in a dir

use

```bash
# don't run this, its just a template example
ls
```

ls also has a bunch of useful arguments to increase its usability which I reccomend checking out, but here are a few I like

::: {.callout-note title="important arguments for `ls`" collapse="false"}
`-l` : long list formatting (looks better IMO)

`-t` : sorts lists by time, showing the newest first

`-c` : with `-t`, orders by last modified

`-r` : reverses order shown, useful when used alongside `-lt`

`-a`, `--all` : shows all files, including hidden ones

here's probably the version I use the most

```bash
ls -lt
```
:::


### `cp` - copy paste

`cp` takes two files as arguments, copying the first to the second

e.g.,

```bash
# don't run this, its just a template example
cp </from/> </to/>
```

using `cp` on dirs requires the `-r` argument

::: {.callout-note title="important arguments for `cp`" collapse="false"}
`-r`, `--recursive` : required when copying all contents of a dir from one to another
:::

### `mv` - move

similar to `cp`, `mv` takes two files as arguments, but instead of just coppying, it coppies the file and then deletes the old one

use

```bash
# don't run this, its just a template example
mv </from_old_place/> </to_new_place/>
```

it again uses the `-r` argument if you want to move a dir containing any number of files or dirs

::: {.callout-note title="important arguments for `mv`" collapse="false"}
`-r`, `--recursive` : required when moving all contents of a dir from one to another
:::

### `rm` - remove

as the name implies, using `rm` removes a file. This can be a dangerous function as files are not always backed up, so use with caution!

To remove a dir we again need to use the `-r` argument

::: {.callout-note title="important arguments for `rm``" collapse="false"}
`-r`, `--recursive` : required when removing all contents of a dir

`-i` : requires a prompt to remove a file, makes it much safer

`-f`, `-force` : forces a remove, be careful when using this
:::


### `chmod` - change file permissions

`chmod` allows you to change file permission access for file owner (user, `u`), “group” (`g`), others (`o`) or everyone (all; `a`). Permissions can be set for reading (`r`), writing (`w`), and executing (`x`).

`chmod` takes a user (either file owner(`u`), group(`g`), or everyone(`a`)) and __adds__ or __subtracts__ permissions for a given file

use

```bash
# don't run this, its just a template example
chmod <user> < + or - > <permission> <file>
```

e.g.,

```bash
# don't run these, they are just examples of use cases

# this will make a script executable for the file owner
chmod u+x script.sh

# this will make data read only
chmod a=r data/raw/*
```

lets take a look at what the file permissions look like for the PAS1640 home dir

```bash
cd /fs/ess/PAS1640

ls -lt
```
```bash-out
total 20
drwxr-xr-x  3 awiedemer673 PAS1640  4096 Jun 25 01:38 users
drwxr-xr-x  3 awiedemer673 PAS1640  4096 Jun 25 01:26 practice_location
drwxr-xr-x  3 msholola     PAS0471  4096 Apr 17 20:34 maria
drwxr-xr-x 12 msholola     PAS0471 16384 Mar 22 10:55 plasma_transcriptomics
drwxr-xr-x  4 cooperstone  PAS1542  4096 Mar 14 13:51 jess
drwxr-xr-x  6 quiroz1      PAS1640  4096 Jun  2  2023 instrument_files
drwxr-xr-x  7 quiroz1      PAS1640  4096 May 13  2023 Apples_DIA
drwxr-xr-x  3 quiroz1      PAS1640  4096 Jun  6  2022 Apples_neg
```

the string of seemingly random letters and dashes denotes file permissions (e.g., drwxr-xr-x)

![](img/file_permissions.png){fig-align="center" width="60%"}

# Project and File organization best practices

Good organization facilitates

	- Collaboration
	- Reproducibility
	- Automation
	- Version Control
	- General chaos prevention


## Some quick best practices

### Use one dir per preject!

![](img/project_org.png){fig-align="center" width="70%"}

#### Separate different kinds of files using a consistent dir structure

Separate

- __Raw data__ (treat as __read-only__, don’t wanna directly mess with it - use `chmod a=r data/raw/*`)
- __Scripts__
- __Outputs__ (results) (treat as disposable and possible to regenerate - make outputs __reproducable__)


### Use relative paths whenever able

![](img/rel_path.png){fig-align="center" width="70%"}

if you use `mv` the absolute path changes, but not necessarily relative paths

> again, `.` is where you are, `..` signifies the path one up in the hierarchy


### File naming

3 good principals for file naming 

	- Machine readable
	- Human readable
	- Ordered in a consistent way

#### Machine readable


In file names provide metadata such as sample ID, date, treatment separated by underscores (_)

e.g.,

	- astro_30S_har2_rep1.csv
	- rariety_treatment_replicate

```bash
ls astro*
```
```bash-out
astro_00S_har1_rep1.csv
astro_10S_har1_rep1.csv
astro_20S_har1_rep1.csv
astro_30S_har1_rep1.csv
etc...
```

```bash
ls *har2*
```
```bash-out
astro_00S_har2_rep1
esme_10S_har2_rep2
etc...
```

#### Combining machine and human readability


	- Use underscores (_) to separate distinct units (sample name, metadata)
	- If you must separate words, use dashes (-) (i.e., wild-type)
	- Limit period use (.) to file extensions (eg., .txt, .csv)
	- (generally) __Never use spaces__

#### Default ordering

	- Use leading zeros when ordering numbers (005, 099)
	- Dates should be YYYY-MM-DD
	- Group similar files together by using the same phrase and number scripts by extension order 
	
e.g.,

```bash
AP-01_normalize.R
AP-02_log-transform.R
AP-03_test-sig.R
```

### Document everying

__Use a README.md file to explain whats in what__

