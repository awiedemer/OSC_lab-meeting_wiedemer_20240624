[
  {
    "objectID": "index.html#meeting-objectives",
    "href": "index.html#meeting-objectives",
    "title": "Lab Meeting 20240626 - CLI and OSC",
    "section": "Meeting objectives",
    "text": "Meeting objectives\n- Learn how OSC is organized\n- Log into OSC on demand and learn how to navigate code server\n- Learn some basic UNIX commands\n- Learn some best file organization practices within the OSC\n- Create your own user directory within our OSC project\nI’m not sure how far we’ll get, but by the end of these lab meetings my goal is to have you introduced to the idea of using software in the command line at OSC\n\n\n\n\n\n\n(Re)Sources\n\n\n\n\n\nMuch of this is based directly on\n\nPLNTPTH 6193 - Practical Computing Skills for Omics Data taught by Jelmer Poelstra (which I highly reccomend)\nand a little from the COMS 2022 bioinformatics webinar series on HPC which can be found here"
  },
  {
    "objectID": "index.html#osc-structure",
    "href": "index.html#osc-structure",
    "title": "Lab Meeting 20240626 - CLI and OSC",
    "section": "OSC structure",
    "text": "OSC structure\n\n\n\nExample of a Node\n\n\n\nWords to know when taking about supercomputers\n\n\n\n\n\n\nTerms\n\n\n\n\n\n\nSupercomputer (aka “compute cluster” or just “cluster): a group of many computers connected through a high speed network\n\n(OSC has 2; “Owens” and “Pitzer”)\n\nNode: a single computer or server\nCore (aka processor/ CPU): a single unit that runs a set of instructions"
  },
  {
    "objectID": "index.html#osc-organization",
    "href": "index.html#osc-organization",
    "title": "Lab Meeting 20240626 - CLI and OSC",
    "section": "OSC Organization",
    "text": "OSC Organization\n\n\n\nOSC Organization Structure\n\n\n\n\n\n\n\n\nParts of OSC\n\n\n\n\n\n\nFile Systems: Where files are stored - this is shared between OSC systems\nLogin Nodes: a few “lower powered” computers that everyone shares after logging in\nCompute Nodes: The computers used to run analysis (e.g., slurm batch scripts)\n\n\n\n\n\nOSC Filing system\nMany directories where files are stored, all with different storage, speed, and back-ups\n\n\n\nOSC Filing System\n\n\n\n\n\n\n\n\nOSC Filing Systems\n\n\n\n\n\n\nHome (/users/) : These are your files only for you. Is backed up\nProject (/fs/ess/) : Shared location for project. Is backed up\nScratch (/fs/scratch/): Stores large input/ output files, is faster than Home or Project. Is NOT backed up."
  },
  {
    "objectID": "index.html#bash-commands",
    "href": "index.html#bash-commands",
    "title": "Lab Meeting 20240626 - CLI and OSC",
    "section": "BASH Commands",
    "text": "BASH Commands\nInstead of clicking on things to run them such as in a graphical user interface (GUI), command line requires, well, commands to do anything\n\n\n\nanatomy of a command\n\n\nUNIX comes with lots of commands (similar to functions in R or Python), but lets start out slow\n\nBaby’s first command: pwd\nLets start with an easy and useful command - pwd which prints the working directory\nType it into the terminal, press enter and see what happens\npwd\n/fs/ess/PAS1640\nEssentially what is happening is we give some input and the output is printed onto the screen which is the default for most UNIX commands\n\n\nCommand with arguments: cal\nHere is another easy example of a command in CLI - cal\ncal\n      June 2024     \nSu Mo Tu We Th Fr Sa\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30\nType in, press enter, get a calendar printed out\nBut we can modify what this command does with arguments\n\n\n\n\n\n\nArguments\n\n\n\n\n\nArguments (also sometimes called flags) come after a command and are preceded by a dash (-) and most often are a single letter\n\n\n\nWith the -j argument using cal we can get printed the Julian calendar instead\ncal -j\n         June 2024         \nSun Mon Tue Wed Thu Fri Sat\n                        153\n154 155 156 157 158 159 160\n161 162 163 164 165 166 167\n168 169 170 171 172 173 174\n175 176 177 178 179 180 181\n182\n\n\nGetting help with -h\nMost commands have multiple arguments, some of which are required for the command to work. We can usually check what a command does and what its arguments are with the -h argument\nLet’s try it with cal\ncal -h\nUsage:\n cal [options] [[[day] month] year]\n\nOptions:\n -1, --one        show only current month (default)\n -3, --three      show previous, current and next month\n -s, --sunday     Sunday as first day of week\n -m, --monday     Monday as first day of week\n -j, --julian     output Julian dates\n -y, --year       show whole current year\n -V, --version    display version information and exit\n -h, --help       display this help text and exit\nFrom this we can see cal has a lot of different options. Just for funsies lets look at using the -3 which prints three monts AND the -j argument simultainiously\nhere, we put the arguments next to each other in any order\ncal -3 -j\n          May 2024                    June 2024                    July 2024         \nSun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat\n            122 123 124 125                          153      183 184 185 186 187 188\n126 127 128 129 130 131 132  154 155 156 157 158 159 160  189 190 191 192 193 194 195\n133 134 135 136 137 138 139  161 162 163 164 165 166 167  196 197 198 199 200 201 202\n140 141 142 143 144 145 146  168 169 170 171 172 173 174  203 204 205 206 207 208 209\n147 148 149 150 151 152      175 176 177 178 179 180 181  210 211 212 213            \n                             182  \nArguments can also be passed after the same dash\ncal -3j\n          May 2024                    June 2024                    July 2024         \nSun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat\n            122 123 124 125                          153      183 184 185 186 187 188\n126 127 128 129 130 131 132  154 155 156 157 158 159 160  189 190 191 192 193 194 195\n133 134 135 136 137 138 139  161 162 163 164 165 166 167  196 197 198 199 200 201 202\n140 141 142 143 144 145 146  168 169 170 171 172 173 174  203 204 205 206 207 208 209\n147 148 149 150 151 152      175 176 177 178 179 180 181  210 211 212 213            \n                             182  \n\n\n\n\n\n\nSpell it out\n\n\n\n\n\nArguments can (but not always) be written out following two preceding dashes (–)\ne.g., -h can be specified out with --help\ndepending on the command, it can require the spelled out or the shortened form, but most basic commands should have both available"
  },
  {
    "objectID": "index.html#commands-i-really-need-you-to-know",
    "href": "index.html#commands-i-really-need-you-to-know",
    "title": "Lab Meeting 20240626 - CLI and OSC",
    "section": "Commands I really need you to know",
    "text": "Commands I really need you to know\n\nCommands that do stuff: cd\nSo far the commands we have used only print something to the screen\nMany commands perform some type of action though, such as cd which allows us to change our current working dir\nlets first see where we are again\npwd\n/fs/ess/PAS1640\ncd takes a dir as an argument and takes us from our current wd to whatever dir we specify\nlets use cd to get to the auspiciously named practice_location/\ncd practice_location/\n\n\n\n\n\n\nAutocomplete with tab\n\n\n\n\n\ninstead of spelling out the full input everytime, you can use tab to autocomplete a line\ntry typing cd p and then pressing tab to try\nIf there are multple dir/ files with the start, double tapping tab will give a list of files that begin with what you have typed so far so you can select which you want to go to\n\n\n\npwd\n/fs/ess/PAS1640/practice_location\nand now we can move around!\nHere we also used relative paths - because practice_location was only one level below, we only had to type out /practice_location and not the absolute dir /fs/ess/PAS1640/practice_location. It is good to get into the habbit of using relative paths instead of absolute ones in case we move anything around.\n\n\n\n\n\n\nMore on movement\n\n\n\n\n\nevery dir has a few hidden directories that are useful to get around\n\n. : is the dir of your current dir\n.. : is the dir directly above you\n\nto go back a level, use cd ..\n\n\n\nif we want to go further into the dir, we can spell out the whole dir to get to the level_3 dir\ncd level_1/level_2/level_3/\nlets check\npwd\nand to get back out, we can use ..\ncd ../../../../\n\n\nMaking directories with mkdir\nmkdir takes a dir as an argument and creates it if one does not already exist\n# don't run this, its just an example of how you would use it\nmkdir &lt;/new_dir&gt;\n\n\n\n\n\n\nNote\n\n\n\nYou can make multiple subdirectories by adding the -p argument to mkdir\n# don't run this, its just an example of how you would use it\nmkdir -p &lt;/new_dir/new_subdir/new_sub-subdir&gt;\n\n\nfor practice, lets navigate to the users folder and make our own folder!\n\n\n\n\n\n\nWarning\n\n\n\nGet to the \\users dir without me showing you!!\n\n\nSolution (click here)\n\nfrom within \\PAS1640\ncd \\users\n\n\n\n\nMaking your own dir\nWithin the \\users dir we can make our own directories!!\ncall it whatever you want, but I personally recommend using\nmkdir $USER\n\n\n\n\n\n\nA tiny bit on variables\n\n\n\n\n\nWhile I’m skipping a detailed explanation on variables, I’ll quickly mention them here\nin UNIX, variables are kept in objects beginning with a dollar sign ($)\nthere are a few default ones such as\n\n$HOME : stores the name of the home dir\n$USER : stores the name of the user\n\nto see what a variable contains, try the echo function\n# this is a general example, don't run it\necho$&lt;VARIABLE&gt;\necho$USER\n\n\n\n\n\n\ntouch - update or create\ntouch has a little bit of an odd name for what it is most often used for.\nthe primary intended use of touch is to “update the access and modification times of each FILE to the current time”, but in my experince is used more for its secondary function of creating an empty file if one does not already exist.\nuse\n# this is a general example, don't run it\ntouch &lt;file&gt;.&lt;extension&gt;\ne.g.,\ntouch README.md\nUse this command to create a README file in your projects as a descriptor of whats there, part of good documentation!!\n\n\nls - list, what’s in a dir\nls can be run on its own to show what is in a dir\nuse\n# don't run this, its just a template example\nls\nls also has a bunch of useful arguments to increase its usability which I reccomend checking out, but here are a few I like\n\n\n\n\n\n\nimportant arguments for ls\n\n\n\n\n\n-l : long list formatting (looks better IMO)\n-t : sorts lists by time, showing the newest first\n-c : with -t, orders by last modified\n-r : reverses order shown, useful when used alongside -lt\n-a, --all : shows all files, including hidden ones\nhere’s probably the version I use the most\nls -lt\n\n\n\n\n\ncp - copy paste\ncp takes two files as arguments, copying the first to the second\ne.g.,\n# don't run this, its just a template example\ncp &lt;/from/&gt; &lt;/to/&gt;\nusing cp on dirs requires the -r argument\n\n\n\n\n\n\nimportant arguments for cp\n\n\n\n\n\n-r, --recursive : required when copying all contents of a dir from one to another\n\n\n\n\n\nmv - move\nsimilar to cp, mv takes two files as arguments, but instead of just coppying, it coppies the file and then deletes the old one\nuse\n# don't run this, its just a template example\nmv &lt;/from_old_place/&gt; &lt;/to_new_place/&gt;\nit again uses the -r argument if you want to move a dir containing any number of files or dirs\n\n\n\n\n\n\nimportant arguments for mv\n\n\n\n\n\n-r, --recursive : required when moving all contents of a dir from one to another\n\n\n\n\n\nrm - remove\nas the name implies, using rm removes a file. This can be a dangerous function as files are not always backed up, so use with caution!\nTo remove a dir we again need to use the -r argument\n\n\n\n\n\n\nimportant arguments for `rm``\n\n\n\n\n\n-r, --recursive : required when removing all contents of a dir\n-i : requires a prompt to remove a file, makes it much safer\n-f, -force : forces a remove, be careful when using this\n\n\n\n\n\nchmod - change file permissions\nchmod allows you to change file permission access for file owner (user, u), “group” (g), others (o) or everyone (all; a). Permissions can be set for reading (r), writing (w), and executing (x).\nchmod takes a user (either file owner(u), group(g), or everyone(a)) and adds or subtracts permissions for a given file\nuse\n# don't run this, its just a template example\nchmod &lt;user&gt; &lt; + or - &gt; &lt;permission&gt; &lt;file&gt;\ne.g.,\n# don't run these, they are just examples of use cases\n\n# this will make a script executable for the file owner\nchmod u+x script.sh\n\n# this will make data read only\nchmod a=r data/raw/*\nlets take a look at what the file permissions look like for the PAS1640 home dir\ncd /fs/ess/PAS1640\n\nls -lt\ntotal 20\ndrwxr-xr-x  3 awiedemer673 PAS1640  4096 Jun 25 01:38 users\ndrwxr-xr-x  3 awiedemer673 PAS1640  4096 Jun 25 01:26 practice_location\ndrwxr-xr-x  3 msholola     PAS0471  4096 Apr 17 20:34 maria\ndrwxr-xr-x 12 msholola     PAS0471 16384 Mar 22 10:55 plasma_transcriptomics\ndrwxr-xr-x  4 cooperstone  PAS1542  4096 Mar 14 13:51 jess\ndrwxr-xr-x  6 quiroz1      PAS1640  4096 Jun  2  2023 instrument_files\ndrwxr-xr-x  7 quiroz1      PAS1640  4096 May 13  2023 Apples_DIA\ndrwxr-xr-x  3 quiroz1      PAS1640  4096 Jun  6  2022 Apples_neg\nthe string of seemingly random letters and dashes denotes file permissions (e.g., drwxr-xr-x)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#some-quick-best-practices",
    "href": "index.html#some-quick-best-practices",
    "title": "Lab Meeting 20240626 - CLI and OSC",
    "section": "Some quick best practices",
    "text": "Some quick best practices\n\nUse one dir per preject!\n\n\n\n\n\n\nSeparate different kinds of files using a consistent dir structure\nSeparate\n\nRaw data (treat as read-only, don’t wanna directly mess with it - use chmod a=r data/raw/*)\nScripts\nOutputs (results) (treat as disposable and possible to regenerate - make outputs reproducable)\n\n\n\n\nUse relative paths whenever able\n\n\n\n\n\nif you use mv the absolute path changes, but not necessarily relative paths\n\nagain, . is where you are, .. signifies the path one up in the hierarchy\n\n\n\nFile naming\n3 good principals for file naming\n- Machine readable\n- Human readable\n- Ordered in a consistent way\n\nMachine readable\nIn file names provide metadata such as sample ID, date, treatment separated by underscores (_)\ne.g.,\n- astro_30S_har2_rep1.csv\n- rariety_treatment_replicate\nls astro*\nastro_00S_har1_rep1.csv\nastro_10S_har1_rep1.csv\nastro_20S_har1_rep1.csv\nastro_30S_har1_rep1.csv\netc...\nls *har2*\nastro_00S_har2_rep1\nesme_10S_har2_rep2\netc...\n\n\nCombining machine and human readability\n- Use underscores (_) to separate distinct units (sample name, metadata)\n- If you must separate words, use dashes (-) (i.e., wild-type)\n- Limit period use (.) to file extensions (eg., .txt, .csv)\n- (generally) __Never use spaces__\n\n\nDefault ordering\n- Use leading zeros when ordering numbers (005, 099)\n- Dates should be YYYY-MM-DD\n- Group similar files together by using the same phrase and number scripts by extension order \ne.g.,\nAP-01_normalize.R\nAP-02_log-transform.R\nAP-03_test-sig.R\n\n\n\nDocument everying\nUse a README.md file to explain whats in what"
  }
]