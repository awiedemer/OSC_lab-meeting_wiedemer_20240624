{
  "hash": "b89473b263a7608f692624c269970bf0",
  "result": {
    "markdown": "---\ntitle: \"Lab Meeting 20240626 - CLI and OSC\"\nauthor: \"Aaron Max Wiedemer\"\ndate: \"2024-06-25\"\ncategories: [command line, OSC, Unix]\ntitle-block-banner: false\nnumber-depth: 3\nimage: img/tidy_data_img.jpeg\neditor_options:\n  chunk_output_type: console\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\n---\n\n\n--------------------------------------------------------------------------------\n\n<br>\n\n![](img/osc_logo.png){fig-align=\"center\" width=\"70%\"}\n\n<br>\n\n## Meeting objectives\n\n\t- Learn how OSC is organized\n\t- Log into OSC on demand and learn how to navigate code server\n\t- Learn some basic UNIX commands\n\t- Learn some best file organization practices within the OSC\n\t- Create your own user directory within our OSC project\n\t\nI'm not sure how far we'll get, but by the end of these lab meetings my goal is to have you introduced to the idea of using software in the command line at OSC\n\t\n::: {.callout-tip title=\"(Re)Sources\" collapse=\"false\"}\n\nMuch of this is based directly on \n\n- [PLNTPTH 6193 - Practical Computing Skills for Omics Data](https://jelmerp.github.io/pracs-sp24/) taught by Jelmer Poelstra (which I _highly_ reccomend) \n- and a little from the COMS 2022 bioinformatics webinar series on HPC which can be found [here](https://www.youtube.com/watch?v=eFqtZsM92a8&list=PLiiqmjBmdWoPynfccwKw_afgfr2UhFUh9&index=3)\n:::\n\n# Intro to High Performance Computing and The Ohio Supercomputer\n\n![](img/owens_HPC_image.png){fig-align=\"center\" width=\"60%\"}\n\n**Supercomputer** (aka a _compute cluster_ or just a _cluster_): a group of __many computers__ connected through a high speed network which can be accessed remotley\n\n\n#### __Why use the OSC?__\n\n- Need more computing power than your own can handles (RAM, CPUs, run time)\n  - e.g., when using large data sets\n- Need to run many analysis\n- Automation of analysis\n\n__Very often useful for Omics data__\n\n#### __OSC Resources__\n\n> -   **<https://ondemand.osc.edu>**: A web portal to use OSC resources through your browser (*login needed*).\n> -   <https://my.osc.edu>: Account and project management (*login needed*).\n> -   <https://osc.edu>: General website with information about the supercomputers, installed software, and usage.\n> \n\n<br>\n\n::: {.callout-tip title=\"Projects\" collapse=false}\n\nAccess to OSC goes through __projects__\n\n\t- Projects can be tied to a lab, class, research project, etc.\n\t- Each project has its own budget in terms of compute hours and storage space\n\t- Users can be part of multiple projects\n\nOur lab's project is __`PAS1640`__\n\n\n:::\n\n## OSC structure\n\n![Example of a Node](img/node_example.png \"Example of a node\"){fig-align=\"center\" width=\"60%\"}\n\n### Words to know when taking about supercomputers\n\n::: {.callout-note title=\"Terms\" collapse=false}\n\n- __Supercomputer__ (aka \"compute cluster\" or just \"cluster): a group of __many computers__ connected through a high speed network \n  - (OSC has 2; \"Owens\" and \"Pitzer\")\n- **Node**: a single computer or server\n- **Core** (aka processor/ CPU): a single unit that runs a set of instructions \n\n:::\n\n## OSC Organization\n\n![OSC Organization Structure](img/osc_organization.png){fig-align=\"center\" width=\"80%\"}\n\n\n \n::: {.callout-note title=\"Parts of OSC\" collapse=false}\n\n- **File Systems**: Where files are stored - this is shared between OSC systems\n- **Login Nodes**: a few \"lower powered\" computers that everyone shares after logging in \n- **Compute Nodes**: The computers used to run analysis (e.g., slurm batch scripts)\n\n:::\n\n### OSC Filing system\n\nMany directories where files are stored, all with different storage, speed, and back-ups\n\n![OSC Filing System](img/osc_file_system.png){fig-align=\"center\" width=\"80%\"}\n\n::: {.callout-note title=\"OSC Filing Systems\" collapse=false}\n\n- **Home** (`/users/`) : These are your files only for you. Is backed up\n- **Project** (`/fs/ess/`) : Shared location for project. Is backed up\n- **Scratch** (`/fs/scratch/`): Stores large input/ output files, is faster than Home or Project. Is NOT backed up.\n\n:::\n\n<br>\n\n# Lets get computing\n\n::: {.callout-important title=\"Everyone go here\" collapse=false}\n\n<https://ondemand.osc.edu>\n\n:::\n\n#### Steps\n\n> 1. log in\n> 2. interactive apps -> servers -> Code Server\n> 3. fill in the following parameters\n\n\n![](img/code_server.png){fig-align=\"center\" width=\"45%\"}\n\n> 4. in code server, select the hamburger menu\n> 5. terminal -> new terminal\n\n\n![](img/new_terminal.png){fig-align=\"center\" width=\"90%\"}\n\n# UNIX crash (bash?) course\n\nOSC uses UNIX (linux like) \n\n::: {.callout-note title=\"Unix shell related terms to know\" collapse=false}\n\n\n\t- **Command line** : the interface where you type commands\n\t- **Terminal** : the program that can run the shell\n\t- **Shell** : The command line interface to your computer (the kernel)\n\t- **Unix shell** : a type of shell that uses unix\n\t- **Bash** : the Unix language that is most common\n\t\n:::\n\n### Unix structure\n\nUnix organization uses a hierarchical directory - often abbreviated to **dir**\n\n- **Root**: the start of the directory (`/`)\n- **Path**: the location of directories\n  - e.g., /fs/ess/PAS1640/aaron/\n  \n![](img/dir_path.png){fig-align=\"center\" width=\"70%\"}\n\n## BASH Commands\n\nInstead of clicking on things to run them such as in a graphical user interface (GUI), command line requires, well, __commands__ to do anything\n\n![anatomy of a command](img/anatomy_of_a_command.png){fig-align=\"center\" width=\"70%\"}\n\nUNIX comes with lots of commands (similar to functions in R or Python), but lets start out slow\n\n### Baby's first command:  `pwd`\n\nLets start with an easy and useful command - `pwd` which prints the working directory\n\nType it into the terminal, press enter and see what happens\n\n```bash\npwd\n```\n```bash-out\n/fs/ess/PAS1640\n```\n\nEssentially what is happening is we give some input and the output is printed onto the screen which is the default for most UNIX commands\n\n\n### Command with arguments: `cal`\n\nHere is another easy example of a command in CLI - `cal`\n\n```bash\ncal\n```\n``` bash-out\n      June 2024     \nSu Mo Tu We Th Fr Sa\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30\n```\n\nType in, press enter, get a calendar printed out\n\nBut we can __modify__ what this command does with arguments\n\n\n::: {.callout-note title=\"Arguments\" collapse=false}\n__Arguments__ (also sometimes called flags) come __after a command and are preceded by a dash (-)__ and most often are a single letter\n:::\n\nWith the `-j` argument using `cal` we can get printed the Julian calendar instead\n\n```bash\ncal -j\n```\n```bash-out\n         June 2024         \nSun Mon Tue Wed Thu Fri Sat\n                        153\n154 155 156 157 158 159 160\n161 162 163 164 165 166 167\n168 169 170 171 172 173 174\n175 176 177 178 179 180 181\n182\n```\n\n### Getting help with `-h`\n\nMost commands have multiple arguments, some of which are required for the command to work. We can usually check what a command does and what its arguments are with the `-h` argument\n\nLet's try it with `cal`\n\n```bash\ncal -h\n```\n```bash-out\nUsage:\n cal [options] [[[day] month] year]\n\nOptions:\n -1, --one        show only current month (default)\n -3, --three      show previous, current and next month\n -s, --sunday     Sunday as first day of week\n -m, --monday     Monday as first day of week\n -j, --julian     output Julian dates\n -y, --year       show whole current year\n -V, --version    display version information and exit\n -h, --help       display this help text and exit\n ```\n \n From this we can see `cal` has a lot of different options. Just for funsies lets look at using the `-3` which prints three monts AND the `-j` argument simultainiously\n\nhere, we put the arguments next to each other in any order\n\n```bash\ncal -3 -j\n```\n```bash-out\n          May 2024                    June 2024                    July 2024         \nSun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat\n            122 123 124 125                          153      183 184 185 186 187 188\n126 127 128 129 130 131 132  154 155 156 157 158 159 160  189 190 191 192 193 194 195\n133 134 135 136 137 138 139  161 162 163 164 165 166 167  196 197 198 199 200 201 202\n140 141 142 143 144 145 146  168 169 170 171 172 173 174  203 204 205 206 207 208 209\n147 148 149 150 151 152      175 176 177 178 179 180 181  210 211 212 213            \n                             182  \n ```\n \nArguments can also be passed after the same dash\n\n```bash\ncal -3j\n```\n```bash-out\n          May 2024                    June 2024                    July 2024         \nSun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat  Sun Mon Tue Wed Thu Fri Sat\n            122 123 124 125                          153      183 184 185 186 187 188\n126 127 128 129 130 131 132  154 155 156 157 158 159 160  189 190 191 192 193 194 195\n133 134 135 136 137 138 139  161 162 163 164 165 166 167  196 197 198 199 200 201 202\n140 141 142 143 144 145 146  168 169 170 171 172 173 174  203 204 205 206 207 208 209\n147 148 149 150 151 152      175 176 177 178 179 180 181  210 211 212 213            \n                             182  \n ```\n\n::: {.callout-tip title=\"Spell it out\" collapse=\"false\"}\n\nArguments can (but not always) be written out following two preceding dashes (--)\n\ne.g., `-h` can be specified out with `--help`\n\ndepending on the command, it can require the spelled out or the shortened form, but most basic commands should have both available\n\n:::\n\n## Commands I really need you to know\n\n### Commands that do stuff: `cd`\n\nSo far the commands we have used only print something to the screen\n\nMany commands perform some type of action though, such as `cd` which **allows us to change our current working dir**\n\nlets first see where we are again\n\n```bash\npwd\n```\n```bash-out\n/fs/ess/PAS1640\n```\n\n`cd` takes a dir as an argument and takes us from our current wd to whatever dir we specify\n\nlets use `cd` to get to the auspiciously named `practice_location/`\n\n```bash\ncd practice_location/\n```\n\n::: {.callout-tip title=\"Autocomplete with `tab`\" collapse=\"false\"}\n\ninstead of spelling out the full input everytime, you can use `tab` to autocomplete a line\n\ntry typing `cd p` and then pressing tab to try\n\nIf there are multple dir/ files with the start, double tapping tab will give a list of files that begin with what you have typed so far so you can select which you want to go to\n\n:::\n\n```bash\npwd\n```\n```bash-out\n/fs/ess/PAS1640/practice_location\n```\n\nand now we can move around!\n\nHere we also used __relative paths__ - because `practice_location` was only one level below, we only had to type out `/practice_location` and not the __absolute__ dir `/fs/ess/PAS1640/practice_location`. It is good to get into the habbit of using relative paths instead of absolute ones in case we move anything around. \n\n\n::: {.callout-note title=\"More on movement\" collapse=\"false\"}\n\nevery dir has a few hidden directories that are useful to get around\n\n- `.` : is the dir of your current dir\n- `..` : is the dir directly above you\n\nto go back a level, use `cd ..`\n\n:::\n\nif we want to go further into the dir, we can spell out the whole dir to get to the `level_3` dir\n\n```bash\ncd level_1/level_2/level_3/\n```\n\nlets check\n\n```bash\npwd\n```\n\nand to get back out, we can use `..`\n\n```bash\ncd ../../../../\n```\n\n### Making directories with `mkdir`\n\n`mkdir` takes a dir as an argument and creates it if one does not already exist\n\nfor practice, lets navigate to the `users` folder and make our own folder!\n\n::: {.callout-warning .callout-warning icon=\"flase\" }\n\nGet to the `\\users` dir without me showing you!!\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\nfrom within `\\PAS1640`\n```bash\ncd \\users\n```\n</details>\n\n:::\n\n#### Making your own dir\n\nWithin the `\\users` dir we can make our own directories!!\n\ncall it whatever you want, but I personally recommend using \n\n```bash\nmkdir $USER\n```\n\n::: {.callout-note title=\"A tiny bit on variables\" collapse=\"false\"}\n\nWhile I'm skipping a detailed explanation on variables, I'll quickly mention them here\n\nin UNIX, __variables__ are kept in objects beginning with a dollar sign (`$`)\n\nthere are a few default ones such as \n\n- $HOME : stores the name of the home dir\n- $USER : stores the name of the user\n\nto see what a variable contains, try the `echo` function\n\n```bash\n# this is a general example, don't run it\necho$<VARIABLE>\n```\n\n```bash\necho$USER\n```\n\n:::\n\n\n### `cp` - copy paste\n\n`cp` takes two files as arguments, copying the first to the second\n\ne.g.,\n\n```bash\ncp \n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}